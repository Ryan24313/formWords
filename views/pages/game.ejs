<html lang="en">

	<%- include('../partials/head.ejs')%>

		<body>
			<div id="game">
				<div id="gameInfo">
					<div id="scores">
						<h3>Scores</h3>
						<% for (let player of Object.values(game.players)) { %>
							<p id="<%- player.id %>"><%- player.username %>: <%- player.score %>
							</p>
							<% } %>
					</div>
					<% if(game.owner==currentUser.id) { %>
						<div id="controls">
							<button onclick="socket.emit('endGame')">End Game</button>
							<button onclick="resetLetters()">Reset Letters</button>
							<button onclick="doTurn()">Do Turn</button>
						</div>
						<% } %>
				</div>
				<table id="board">
					<tbody>
						<% for (let [rowIndex, row] of Object.entries(game.board)) { %>
							<tr class="row" id="row-<%- rowIndex %>">
								<% for (let [letterIndex, letter] of Object.entries(row)) { %>
									<td class="letterCell" id="board-<%- letterIndex %>,<%- rowIndex %>" data-x="<%- letterIndex %>"
										data-y="<%- rowIndex %>">
										<% if (letter.length>0) { %>
											<div class="letterPiece" id="board-<%- letterIndex %>,<%- rowIndex %>">
												<p class="letter">
													<% if (letter.length> 0) { %>
														<%- letter[letter.length - 1].letter %>
															<% } %>
												</p>
											</div>
											<% } %>
												<p class="stack">
													<% if (letter.length> 0) { %>
														<%- letter.length %>
															<% } else {%>
																<% } %>
												</p>
									</td>
									<% } %>
							</tr>
							<% } %>
					</tbody>
				</table>
				<div id="letters">
					<% for (let [index, letter] of Object.entries(currentUser.letters)) { %>
						<div class="letterCell" id="hand-<%- index %>">
							<div class="letterPiece" id="hand-<%- index %>">
								<p class="letter"><%- letter %></p>
							</div>
						</div>
						<% } %>
				</div>
			</div>
		</body>

		<script>
			let game = JSON.parse('<%- JSON.stringify(game) %>')
			let currentUser = JSON.parse('<%- JSON.stringify(currentUser) %>')
			let dragElement = null
			let placedLetters = []

			function arrayMove(arr, fromIndex, toIndex) {
				var element = arr[fromIndex]
				arr.splice(fromIndex, 1)
				arr.splice(toIndex, 0, element)
			}

			for (let letterCell of document.getElementsByClassName('letterCell')) {
				letterCell.addEventListener('dragover', (event) => {
					event.preventDefault()
				})
				letterCell.addEventListener('drop', (event) => {
					event.preventDefault()

					let dropElement = event.currentTarget
					let currentLetter = null

					if (dropElement == dragElement.parentElement) return

					if (
						dropElement.children.length > 0 &&
						dropElement.children[dropElement.children.length - 1].classList.contains('letterPiece') &&
						(
							dropElement.id.split('-')[0] != 'board' ||
							dropElement.children[dropElement.children.length - 1].classList.contains('placing')
						)
					) {
						currentLetter = dropElement.children[dropElement.children.length - 1]
					}

					console.log(currentLetter);
					if (currentLetter) {
						dropElement.removeChild(currentLetter)
						dragElement.parentElement.appendChild(currentLetter)
					}

					if (dropElement.id.split('-')[0] == 'board') {
						dropElement.querySelector('.stack').innerText = game.board[dropElement.dataset.y][dropElement.dataset.x].length + 1
					}

					if (dragElement.parentElement.id.split('-')[0] == 'board') {
						dragElement.parentElement.querySelector('.stack').innerText = game.board[dragElement.parentElement.dataset.y][dragElement.parentElement.dataset.x].length || ''

						if (currentLetter) dragElement.parentElement.querySelector('.stack').innerText = game.board[dragElement.parentElement.dataset.y][dragElement.parentElement.dataset.x].length + 1 || ''
					}

					if (dropElement.parentElement.id == 'letters') {
						currentLetter = document.querySelector(`.letterPiece#${dropElement.id}`)

						let dragIndex = dragElement.id.split('-')[1]
						let dropIndex = dropElement.id.split('-')[1]

						arrayMove(currentUser.letters, dragIndex, dropIndex)

						dragElement.id = `hand-${dropIndex}`
						currentLetter.id = `hand-${dragIndex}`

						socket.emit('lettersMoved', currentUser.letters)
					}

					if (dropElement.id.split('-')[0] == 'board') dragElement.classList.add('placing')
					else dragElement.classList.remove('placing')

					if (currentLetter) {
						if (dragElement.parentElement.id.split('-')[0] == 'board') currentLetter.classList.add('placing')
						else currentLetter.classList.remove('placing')
					}

					placedLetters.push({
						index: Number(dragElement.id.split('-')[1]),
						letter: dragElement.children[0].innerText,
						x: Number(dropElement.dataset.x),
						y: Number(dropElement.dataset.y),
					})

					dragElement.classList.remove('dragging')
					dragElement.parentElement.removeChild(dragElement)
					dropElement.appendChild(dragElement)

					dragElement = null
				})
			}

			for (let letterPiece of document.getElementsByClassName('letterPiece')) {
				letterPiece.setAttribute('draggable', true)

				letterPiece.addEventListener('dragstart', (event) => {
					if (dragElement) return

					dragElement = event.target
					dragElement.classList.add('dragging')
				})
			}

			//  function load(newGame) {
			//    let board = newGame.board

			//    for (let rowIndex = 1; board.length; rowIndex++) {
			//      let row = board[rowIndex]

			// for (let letter)
			//    }
			//  }

			function resetLetters() {
				for (let i = 0; i < currentUser.letters.length; i++) {
					let letterElement = document.querySelector(`.letterPiece#hand-${i}`)

					let parentElement = letterElement.parentElement

					if (parentElement.id == `hand-${i}`) continue

					letterElement.classList.remove('placing')
					letterElement.classList.remove('dragging')

					letterElement.parentElement.removeChild(letterElement)
					document.querySelector(`.letterCell#hand-${i}`).appendChild(letterElement)
				}
			}

			function doTurn() {
				socket.emit('turn', placedLetters)
			}

			//  window.onload = load(game)
		</script>

</html>